% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_class.R, R/latent_vec.R
\docType{class}
\name{LatentNeuroVec-class}
\alias{LatentNeuroVec-class}
\title{LatentNeuroVec Class}
\description{
A class that represents a 4-dimensional neuroimaging array using a latent space
decomposition. It stores the data as a set of basis functions (dictionary) and
a corresponding set of loadings (coefficients), enabling efficient representation
and manipulation of high-dimensional data.

The \code{LatentNeuroVec} class provides a memory-efficient representation of neuroimaging
data in a latent space (e.g., from PCA or ICA). It stores data as a product of basis vectors
and loadings, allowing for efficient storage and computation of high-dimensional
neuroimaging data.
}
\details{
\code{LatentNeuroVec} inherits from \code{\link[neuroim2]{NeuroVec-class}}
and \code{\link[neuroim2]{AbstractSparseNeuroVec-class}}. The original 4D data
can be reconstructed as:
\deqn{data[v,t] = \sum_k \bigl(basis[t,k] \times loadings[v,k]\bigr) + offset[v]}.
(Note: `v` indexes voxels within the mask).

**Important Naming Note:**
* In this R object: `@basis` stores temporal components (`nTime x k`), `@loadings` stores spatial components (`nVox x k`).
* In the HDF5 spec: `/scans/.../embedding` stores temporal (`nTime x k`), `/basis/basis_matrix` stores spatial (`k x nVox`).
The I/O functions handle the mapping and transposition.

This approach is especially useful for large datasets where storing the full
4D array is expensive.
}
\section{Slots}{

\describe{
\item{\code{basis}}{A \code{Matrix} object where each column represents a basis vector
in the latent space.}

\item{\code{loadings}}{A \code{Matrix} object (often sparse) containing the coefficients
for each basis vector across the spatial dimensions.}

\item{\code{offset}}{A \code{numeric} vector representing a constant offset term for
each voxel or spatial location.}

\item{\code{map}}{A \code{IndexLookupVol} object representing the mapping from basis to loadings.}

\item{\code{label}}{A \code{character} string representing the label for the latent vector.}
}}

\section{Inheritance}{

\code{LatentNeuroVec} inherits from:
\itemize{
  \item \code{\link[neuroim2]{NeuroVec-class}}
  \item \code{\link[neuroim2]{AbstractSparseNeuroVec-class}}
}
}

\section{Implementation Details}{

The class implements a matrix factorization approach where the data is represented as:
\deqn{X = B \times L^T + c}
where:
\itemize{
  \item B is the basis matrix (\eqn{n \times k})
  \item L is the loadings matrix (\eqn{p \times k})
  \item c is an optional offset vector
  \item n is the number of time points
  \item p is the number of voxels
  \item k is the number of components
}
}

\examples{
\dontrun{
if (requireNamespace("neuroim2", quietly = TRUE) &&
  requireNamespace("Matrix", quietly = TRUE) &&
  !is.null(fmristore:::create_minimal_LatentNeuroVec)) {
  # Create a LatentNeuroVec object using the helper
  # The helper creates a mask, basis, and loadings internally.
  # It uses new("LatentNeuroVec", ...) after creating constituent parts if not directly calling
  # a LatentNeuroVec constructor, or directly calls a constructor.
  # Our helper fmristore:::create_minimal_LatentNeuroVec returns a LatentNeuroVec.

  latent_vec <- NULL
  tryCatch(
    {
      latent_vec <- fmristore:::create_minimal_LatentNeuroVec(
        space_dims = c(5L, 5L, 3L),
        n_time = 8L,
        n_comp = 2L
      )

      print(latent_vec)

      # Access slots (example)
      # print(dim(latent_vec@basis))
      # print(dim(latent_vec@loadings))

      # Example of accessing data (reconstruction for a voxel would be more complex)
      # This class is more about representation; direct element access is usually via methods.
      # For example, a method might be `series(latent_vec, vox_indices = c(1,2,3))`
      # For a simple demonstration, we can show its dimensions:
      print(dim(latent_vec)) # from NeuroVec inheritance

    },
    error = function(e) {
      message("LatentNeuroVec example failed: ", e$message)
    })

} else {
  message("Skipping LatentNeuroVec example: neuroim2, Matrix, or helper not available.")
}
}

}
\seealso{
\code{\link[neuroim2]{NeuroVec-class}},
\code{\link[neuroim2]{AbstractSparseNeuroVec-class}}.

\code{\link[neuroim2]{NeuroVec-class}} for the base 4D brain image class.
\code{\link[neuroim2]{AbstractSparseNeuroVec-class}} for the sparse representation framework.
}
