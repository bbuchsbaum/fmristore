% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_class.R, R/latent_vec.R
\docType{class}
\name{LatentNeuroVec-class}
\alias{LatentNeuroVec-class}
\title{LatentNeuroVec Class}
\description{
A class that represents a 4-dimensional neuroimaging array using a latent space
decomposition. It stores the data as a set of basis functions (dictionary) and
a corresponding set of loadings (coefficients), allowing for efficient
representation and manipulation of high-dimensional neuroimaging data.

The \code{LatentNeuroVec} class provides a memory-efficient representation of neuroimaging
data in a latent space (e.g., from PCA or ICA). It stores data as a product of basis vectors
and loadings, allowing for efficient storage and computation of high-dimensional neuroimaging data.
}
\details{
The LatentNeuroVec class provides a memory-efficient representation of 4D
neuroimaging data by decomposing it into a set of basis functions and their
corresponding loadings. This approach is particularly useful for large datasets
where direct storage of the full 4D array would be prohibitively expensive.

The original 4D data can be reconstructed as:
data[x,y,z,t] = sum(basis[t,i] * loadings[i,v]) + offset[v]
where v is the voxel index corresponding to coordinates (x,y,z),
and i indexes the basis functions.
}
\section{Slots}{

\describe{
\item{\code{basis}}{A \code{Matrix} object where each column represents a basis vector
in the latent space.}

\item{\code{loadings}}{A \code{Matrix} object (typically sparse) containing the coefficients
for each basis vector across the spatial dimensions.}

\item{\code{offset}}{A \code{numeric} vector representing a constant offset term for
each voxel or spatial location.}
}}

\section{Inheritance}{

\code{LatentNeuroVec} inherits from:
\itemize{
  \item \code{\link[neuroim2]{NeuroVec-class}}: Base class for 4D brain images
  \item \code{\link[neuroim2]{AbstractSparseNeuroVec-class}}: Provides sparse representation framework
}
}

\section{Implementation Details}{

The class implements a matrix factorization approach where the data is represented as:
\deqn{X = B \times L^T + c}
where:
\itemize{
  \item B is the basis matrix (n × k)
  \item L is the loadings matrix (p × k)
  \item c is an optional offset vector
  \item n is the number of time points
  \item p is the number of voxels
  \item k is the number of components
}
}

\examples{
\dontrun{
library(Matrix)
library(neuroim2)

# Create a simple LatentNeuroVec object
basis <- Matrix(rnorm(100 * 10), nrow = 100, ncol = 10)
loadings <- Matrix(rnorm(10 * 1000), nrow = 10, ncol = 1000, sparse = TRUE)
offset <- rnorm(1000)

latent_vec <- new("LatentNeuroVec",
                  basis = basis,
                  loadings = loadings,
                  offset = offset,
                  space = NeuroSpace(dim = c(10, 10, 10)))  # Assuming 1000 voxels total

# Access the basis functions
basis_functions <- latent_vec@basis

# Reconstruct a single time point (this is a simplified example)
time_point_1 <- latent_vec@loadings \%*\% latent_vec@basis[1,] + latent_vec@offset
}

}
\seealso{
\code{\link[neuroim2]{NeuroVec-class}} for the base 4D brain image class.
\code{\link[neuroim2]{AbstractSparseNeuroVec-class}} for the sparse representation framework.

\code{\link[neuroim2]{NeuroVec-class}} for the base 4D brain image class.
\code{\link[neuroim2]{AbstractSparseNeuroVec-class}} for the sparse representation framework.
}
