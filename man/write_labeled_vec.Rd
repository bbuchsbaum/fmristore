% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/labeled_vec.R
\name{write_labeled_vec}
\alias{write_labeled_vec}
\title{Write a NeuroVec to an HDF5 file with NIfTI-like quaternions}
\usage{
write_labeled_vec(
  vec,
  mask,
  labels,
  file,
  compression = 4,
  dtype = hdf5r::h5types$H5T_NATIVE_DOUBLE,
  chunk_size = 1024,
  header_values = list(),
  verbose = FALSE
)
}
\arguments{
\item{vec}{A 4D \code{\link[neuroim2]{NeuroVec}} with dimension \code{[X,Y,Z,nVols]}.}

\item{mask}{A \code{\link[neuroim2]{LogicalNeuroVol}} of shape \code{[X,Y,Z]}
(the same 3D shape as \code{vec}).}

\item{labels}{A character vector of length \code{nVols}, labeling each 4D sub-volume.}

\item{file}{Either a character path to the HDF5 file to create or
an open \code{\link[hdf5r]{H5File}} in write mode.}

\item{compression}{Integer \code{0-9} for gzip level; default \code{4}.}

\item{dtype}{An HDF5 data type object (e.g., \code{hdf5r::h5types$H5T_NATIVE_FLOAT}).
Default is \code{hdf5r::h5types$H5T_NATIVE_DOUBLE}.}

\item{chunk_size}{If non-NULL, the chunk dimension for the 1D datasets. Default is \code{1024}.}

\item{header_values}{A named list of optional overrides for fields in the header
(e.g., \code{list(qform_code=1L, sform_code=2L)}). Note that fields derived from
`vec` or `mask` (like `dim`, `pixdim`, quaternion fields) cannot be overridden here.}

\item{verbose}{Logical, whether to print verbose messages during processing.}
}
\value{
Invisibly returns the \code{\link[hdf5r]{H5File}} object, which now
  has all the data and header info stored in it.
}
\description{
Creates an HDF5 file following a NIfTI-like header layout, storing:
\itemize{
  \item \code{/header/dim} => \code{[4, X, Y, Z, nVols, 1,1,1]}
  \item \code{/header/pixdim} => \code{[0.0, dx, dy, dz, ...]} (Note: qfac stored in /header/qfac)
  \item \code{/header/quatern_b,c,d} and \code{qoffset_x,y,z}
  \item \code{/header/qfac} => Quaternion factor (±1)
  \item \code{/mask} => 3D dataset \code{[X, Y, Z]} (0/1) at root level
  \item \code{/labels} => array of label strings at root level
  \item \code{/data/<label>} => 1D array (length = number of nonzero mask voxels)
        storing the sub-volume values
}
}
\details{
The 4×4 matrix in \code{trans(space(vec))} is passed to
\code{\link[neuroim2]{matrixToQuatern}}, which returns a list containing:
\itemize{
  \item \code{quaternion = c(b, c, d)} (the three imaginary parts)
  \item \code{qfac} (±1 sign)
}
This function stores \code{qfac} in \code{/header/qfac} and sets \code{/header/pixdim[0]=0}.
We also gather voxel spacing (dx,dy,dz) from \code{spacing(space(vec))} and
the origin from \code{origin(space(vec))}.

We store a subset of NIfTI-like header fields in the \code{/header} group.
The user can supply \code{header_values} (a named list) to override or
augment *some* additional fields (e.g., \code{qform_code=1L}). See implementation
notes for which fields are protected.
}
\seealso{
\code{\link[neuroim2]{matrixToQuatern}} for how the quaternion is derived,
\code{\link[neuroim2]{quaternToMatrix}} for reconstructing the 4×4,
\code{\link{read_labeled_vec}} for reading the file back in.
}
