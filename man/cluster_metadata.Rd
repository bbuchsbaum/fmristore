% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_generic.R
\name{cluster_metadata}
\alias{cluster_metadata}
\title{Get cluster metadata}
\usage{
cluster_metadata(x)
}
\arguments{
\item{x}{The object from which to retrieve the cluster metadata}
}
\value{
A data frame or other structure containing metadata for each cluster
}
\description{
This generic returns any available metadata associated with clusters in an object.
}
\examples{
\dontrun{
if (requireNamespace("neuroim2", quietly = TRUE) &&
    requireNamespace("hdf5r", quietly = TRUE) &&
    exists("H5ParcellatedMultiScan", where = "package:fmristore") &&
    exists("cluster_metadata", where = "package:fmristore") &&
    !is.null(fmristore:::create_minimal_h5_for_H5ParcellatedMultiScan)) {

  temp_exp_file <- NULL
  exp_obj <- NULL
  tryCatch({
    # Create a minimal H5ParcellatedMultiScan
    temp_exp_file <- fmristore:::create_minimal_h5_for_H5ParcellatedMultiScan()
    exp_obj <- fmristore::H5ParcellatedMultiScan(file_path = temp_exp_file)

    # Get the cluster metadata
    c_meta <- cluster_metadata(exp_obj)
    print(c_meta)
    # The helper currently doesn't add rich cluster_metadata,
    # so this is likely an empty data.frame or one with default cluster names/IDs.

  }, error = function(e) {
    message("cluster_metadata example failed: ", e$message)
  }, finally = {
    if (!is.null(exp_obj)) try(close(exp_obj), silent = TRUE)
    if (!is.null(temp_exp_file) && file.exists(temp_exp_file)) {
      unlink(temp_exp_file)
    }
  })
} else {
  message("Skipping cluster_metadata example: dependencies or helper not available.")
}
}

}
